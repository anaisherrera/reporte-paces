[
["index.html", "Investigación Social Abierta Herramientas para la reproducibilidad, colaboración y comunicación académica Presentación", " Investigación Social Abierta Herramientas para la reproducibilidad, colaboración y comunicación académica Juan Carlos Castillo 2019-08-23 Presentación Este es un libro orientado a describir herramientas de investigación reproducible enfocado a un público del ámbito de las ciencias sociales. Está inspirado sin duda por la noción de ciencia abierta, pero consiste básicamente en una guía práctica de software de escritura, comunicación y colaboración. El argumento básico es que el hacer ciencia abierta pasa por la reproducibilidad de nuestras investigaciones, y esto nos lleva a privilegiar el trabajo en texto plano. Capítulos a desarrollar: 1- Introducción 2- Ciencia Abierta 3- Documentos reproducibles Markdown / Rmarkdown Tejiendo escritura y análisis: Knitr Pandoc, plantillas y salidas 4- Citando plano: Bibtex &amp; Zotero 5- Control de versiones 6- Flujos reproducibles Organización: carpetas y path relativos Orden de código Colaboración en Github: forks, pull requests, issues y projects 7- Comunicación Publicación web vía Rmarkdown, blogdown &amp; bookdown Presentando: Xaringan Open Science Framework &amp; SocArxiv Repositorios (Dataverse) 8- Apéndice: Implementación de Flujo X en Atom "],
["introduccion.html", "Capitulo 1 Introducción", " Capitulo 1 Introducción ¿Es la ciencia una actividad cerrada? El uso de la palabra abierta junto a ciencia tiene sin duda un sentido crítico hacia formas de hacer ciencia que se caracterizan por las restricciones y el cierre. Parte importante de esta crítica tiene que ver con el difícil acceso a los resultados de investigaciones científicas, por barreras tanto comunicacionales como también económicas. El concepto de “barreras de pago” (paywall), una de las principales críticas a la ciencia actual, justamente consiste en que se debe pagar para poder acceder al conocimiento que en gran parte ha sido financiado por fondos públicos. Cuando el acceso al conocimiento está mediado por el tamaño de la billetera, sin duda surgen una serie de cuestionamientos sobre si esta forma de hacer y divulgar ciencia es la correcta. … Este libro tiene dos fuentes de inspiración principales. La primera es un artículo de Jake Bowers titulado “Six steps for a better relationship with your future self”, y la segunda es el trabajo de Kieran Healey, en particular su libro de “The Plain Person’s Guide to Plain Text Social Science.” (Healy 2018) Idea 2: Existen muchos libros, páginas y foros de análisis de datos; también existen manuales de escriura tipo “como hacer una tesis” o “diseño de investigación social”, pero casi no hay guias que discutan y apoyen las deciciones que se toman en el proceso mismo de la investigación. ¿Dónde escribo? ¿Cómo analizo los datos? ¿Cuál es la mejor manera de colaborar? Estos procesos son cerrados, tal como académicos y académicas se encierran en sus oficinas a producir con maneras sui-generis y que cada uno va escogiendo según le acomoda. … Temas a abordar: Acceso Reproducibilidad Colaboración Comunicación Referencias "],
["documentos-reproducibles.html", "Capitulo 2 Documentos reproducibles 2.1 Sobre texto plano 2.2 Markdown 2.3 Knitr 2.4 Trabajando con documentos dinámicos en RStudio", " Capitulo 2 Documentos reproducibles En la investigación académica en general el proceso de escritura se encuentra separado del análisis, en programas y documentos distintos. El traspaso de información entre el programa de análisis y el programa de edición de texto se realiza con un clásico: cortar y pegar. ¿Cuáles son las desventajas de cortar y pegar? La principal es el límite a la reproducibilidad. ¿Cómo identificar los análisis que finalmente son reportados? Eficiencia: cada vez que se realicen cambios en los análisis, nuevamente implica cortar-pegar, y es difícil llevar un registro apropiado de las versiones de los documentos. Los documentos dinámicos permiten lidiar con las limitaciones anteriores, ya que los análisis y resultados están en un mismo documento. Esto es posible ya que se combinan dos lenguajes en texto plano: escritura y código de análisis. La clave es que el programa de edición y de análisis pueda identificar qué secciones del texto corresponden a escritura y cuáles corresponden a análisis. 2.1 Sobre texto plano ¿Por qué escribir en texto plano en lugar de un programa que me muestre inmediatamente el texto y su formato (tipo Word)? Hay múltiples razones, solo resalto dos: 1 - Propiedad: los contenidos guardados en formatos de procesadores comerciales (como Word) dependen del pago de una licencia para poder leerse. Si el software es imposible leerlos, por lo tanto la propiedad de los contenidos guardados en ese formato no son del autor/a, sino de la empresa de software. El texto plano no depende de un software comercial para poder leerse ni modificarse. 2 - Flexibilidad en incorporación de texto y análisis: el escribir en texto plano permite incluir en un mismo documento elementos de escritura y de análisis de datos realizado en texto plano, por lo tanto no se requiere cortar ni pegar en otro documento. Actualmente existen una serie de herramientas que facilitan la elaboración de documentos dinámicos, en particular basados en la librería knitr (tejer). Esta librería permite generar documentos escritos en lenguaje Markdown y análisis realizado en R. 2.2 Markdown Combinar texto y código de análisis requiere que ambos puedan ser generados en una misma plataforma. Y para poder hacer esto, una solución es que lo que se escriba en el documento sea libre de plataforma. El texto plano es una forma de escribir que no requiere ningún programa especial para poder acceder o generar un documento. El ejemplo más cercano para los usuarios de Windows son los archivos .txt, que se pueden abrir con cualquier editor simple. Ahora bien, también para escribir necesitamos elementos de edición, como por ejemplo encabezados, listas, imágenes, negritas, cursivas. Y es aquí donde Markdown permite integrar elementos de edición en texto plano. ¿Cómo se hace? incorporando código o “marcas” de edición, pero de la manera más simple posible (de ahí el nombre markdown, marcas bajas o pocas marcas). Estas marcas indican las partes del texto que luego serán interpretadas de una manera especial al momento de convertir el documento a otro formato que sea más amigable a la publicación (como html o pdf). Por lo tanto, la manera de trabajar es en base a un editor de texto plano, y que al final se convierte a un documento publicable. 2.2.1 Marcas de edición Títulos Los títulos se generan mediante el caracter # , de la siguiente manera: # Titulo 1 ## Título 2 ### Título 3 Lo que al convertir genera lo siguiente: Titulo 1 Titulo 2 Titulo 3 Negritas / cursivas esto es **negrita** esto es *cursiva* esto es negrita esto es cursiva Listas ``` - item 1 - item 2 - item sub 2 - item sub 2 sub 2 1. item 2. item - item - item ``` item 1 item 2 item sub 2 item sub 2 sub 2 item item item item Web links Facso http://www.facso.uchile.cl/ [Facso](http://www.facso.uchile.cl/) [http://www.facso.uchile.cl/](http://www.facso.uchile.cl/) Imágenes En general: ![](ruta-a-imagen/imagen.jpg) Ejemplo: ![](images/knitr.png) Esta imagen se encuentra en el subdirectorio images Si se desea agregar otros elementos de edición como centrado o tamaño, hay que recurrir a marcas de html: &lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;images/knitr.png&quot; width=&quot;240px&quot; height=&quot;280px&quot;/&gt; &lt;/p&gt; Como se puede ver, markdown está hecho para edición simple, y cualquier aspecto que requiera una mayor edición implica recurrir a otros lenguajes, en este caso html. Tablas Markdown no es un lenguaje óptimo para generar tablas. Justamente se trata de que las tablas sean generadas automáticamente por los programas de análisis de datos. Sin embargo en ocasiones es necesario realizar tablas con contenidos de texto, por ejemplo Esta |es | la tabla - |- |- y | este | el contenido | de las | celdas Esta es la tabla y este el contenido de las celdas 2.3 Knitr Knitr es una librería de R que convierte (compila) documentos escritos en Rmarkdown y que combinan texto y análisis hacia otros formatos. Esto es posible ya que reconoce marcas de edición y código de análisis y permite su transformación a formatos como pdf, word y html. Una representación del flujo según Healey es la siguiente: El documento central de trabajo es uno en formato .Rmd (Rmarkdown), que combina texto en Markdown y código R, lo que se detalla más abajo. La librería Knitr hace la transformación de este documento a formatos como html y/o pdf, para lo cual utiliza el convertidor pandoc. No es necesario conocer al detalle todos los elementos de este flujo para hacer funcionar un documento dinámico, sino básicamente dos: 1) Markdown, y 2) Trozos de código. Vamos por parte. 2.3.1 Trozos (chunks) de código La caracteristica principal de Knitr es que identifica las secciones de código en la hoja y los ejecuta mediante R. Estos trozos de código se encuentran delimitados de la siguiente manera: ```{r} 4+5 ``` Es decir, todo lo que comience por ```r y termine con ``` será identificado como código de análisis (el atajo para generar un chunk en RStudio es ctrl+alt+i) 2.3.2 Tipos de chunks En general hay cinco opciones básicas de edición relacionadas con chunks y su visualización en el documento final. Esto se maneja mediante opciones que aparecen al inicio en el chunk, luego de la letra r código y resultado (opción por defecto) ```{r} 1 + 1 ``` Resulta 1 + 1 ## [1] 2 solo código, ocultando resultados: ```{r, results=&#39;hide&#39;} 1 + 1 ``` Resulta: 1 + 1 solo resultado ```{r, echo=FALSE} 1 + 1 ``` Resulta: ## [1] 2 ni código ni resultado {r echo=FALSE results='hide'} resultado “tal cual como es”: {r results='asis'} se utiliza principalmente para comandos de generación de tablas, que arrojan un código que luego puede ser interpretado por otro lenguaje (por ejemplo, html) 2.4 Trabajando con documentos dinámicos en RStudio RStudio es principalmente un editor para análisis de datos con R, pero últimamente ha ido incorporando herramientas para reportes dinámicos. Para ello utiliza un tipo de archivos con extensión Rmd que significa Rmarkdown. Y en este contexto Rmarkdown es la forma en que Rstudio identifica los archivos que combinan texto y código. Para generar un archivo Rmarkdown, simplemente new file &gt; Rmarkdown Y luego para convertir este documento, presionar el boton Knitr. El generador de documentos por defecto trae un texto de ejemplo donde hay analisis y tablas, y además dos cosas: Preámbulo o YAML (Yet Another Markdown Language): esta sección del inicio que se encuentra enmarcada entre --- incluye algunos datos básicos del documento que luego se consideran al momento de convertirlo al documento editado final. Por ejemplo, si se prefiere que la conversión sea a html, se incluye la opción output: html_document --- title: &quot;nuevo&quot; author: &quot;jc&quot; date: &quot;5/30/2019&quot; output: html_document --- Chunk de opciones generales: va al inicio del documento, luego del YAML. En general, la que aparece por defecto echo=TRUE se refiere a que se muestren los resultados de los chunks de código. "],
["citando-plano.html", "Capitulo 3 Citando plano 3.1 Bibtex, Zotero y Better BibTex (BBT) 3.2 Referenciando en TEX 3.3 Referenciando en Markdown 3.3 Markdown / Xaringan 3.3 Usando Atom para flujo de trabajo académico en texto plano con citas", " Capitulo 3 Citando plano Objetivo: facilitar la inclusión de citas y referencias bibliográficas en documentos escritos en texto plano (Markdown / Latex). 3.1 Bibtex, Zotero y Better BibTex (BBT) La forma general como funciona la inclusión de referencias en texto plano (Latex/Markdown) es tenerlas almacenadas en formato Bibtex (archivos en extensión .bib). Este formato almacena las referencias en base a ciertos campos donde se incluye la información correspondiente. Por ejemplo: @article{sabbagh_dimension_2003, title = {The Dimension of Social Solidarity in Distributive Justice}, volume = {42}, timestamp = {2014-09-26T12:30:41Z}, number = {2}, urldate = {2014-09-26}, journal = {Social science information}, author = {Sabbagh, Clara}, year = {2003}, pages = {255--276}, file = {Snapshot:/storage/V5R7I29W/255.html:text/html}, groups = {social justice theory,social justice theory} } Luego, en la primera línea aparece la “clave” (key) de la referencia (en este caso sabbagh_dimension_2003), que permite llamarla en el texto como veremos más adelante. Por supuesto, almacenar manualmente referencias en este formato bib no es muy amigable. Si bien una serie de softwares de administración de referencias tienen la opción de convertir fácilmente la colección o parte de ella a formato .bib, el problema es que si se añade una referencia en el software, cada vez habría que convertir/sincronizar nuevamente a .bib para mantener esta base también actualizada. Por lo tanto, lo ideal sería que una colección .bib se actualizara automáticamente desde un software de gestión de referencias. La solución que por ahora se recomienda es usar la aplicación Better(bib)tex (BBT), que funciona dentro de Zotero (www.zotero.org). Ambos gratuitos y de código abierto, así que ok. BBT genera una colección .bib en base a librerías Zotero, se configura solo una vez y luego se mantiene sincronizada, para no preocuparse más del asunto. Zotero / BBT: El funcionamiento de Zotero queda fuera del alcance de este tutorial, solo nos enfocaremos en el vínculo con BBT. Bajar Zotero 5 standalone https://www.zotero.org/ Bajar el archivo para instalar BBT, ultima actualización al 19 oct 2017: https://github.com/retorquere/zotero-better-bibtex/releases/download/v5.0.28/zotero-better-bibtex-5.0.28.xpi En Zotero, Tools - Add-ons En la ventana emergente, esquina superior derecha, menú con ícono de tuerca, Install Add-on from file, dar path hacia el archivo xpi de BBT Reiniciar Zotero Exportando / sincronizando con archivo Bib: posicionarse sobre una carpeta de referencias de Zotero (que también puede ser la colección completa, o sea My Library), botón derecho, export collection, y en el formato escoger “Better BibTex”. En las “translator options” marcar “keep updated”, que sincroniza el bib en cuanto se agrega una referencia a Zotero Luego escoger directorio donde se graba (que puede ser el mismo de Zotero). Se recomienda que el nombre del archivo no lleve espacios. Para revisar las opciones de la sincronización, ir a edit&gt;preferences aparece una pestaña nueva al final a la derecha de BBT. En esa pestaña hay una serie de opciones que luego se pueden explorar, por lo pronto ir a la pestaña “Automatic export” donde debería aparecer en el listado la carpeta seleccionada para exportar. En “automatic export” seleccionar “on change”, que hace que cada vez que se cambia algo en Zotero de esa carpeta, se cambia también en el archivo .bib exportado y sincronizado. Más información sobre BBT: https://github.com/retorquere/zotero-better-bibtex/wiki (NOTA: en caso que no funcione, puede ser por problemas exportando con la nueva versión de Zotero (5); la adaptación de BBT se encuentra en desarrollo, ver https://github.com/retorquere/zotero-better-bibtex/issues/555); por lo tanto, si hay problemas con la instalación tradicional con el Zotero 5, se recomienda instalar la versión 4 de Zotero Standalone, y bajar la versión previa correspondiente de la extensión https://github.com/retorquere/zotero-better-bibtex/releases/tag/1.6.100) 3.1.1 Sobre exportar referencias en trabajo colaborativo Aquí, una opción es dar el link desde Markdown/Latex al archivo completo de Zotero (del autor a cargo), pero en general es muy pesado y contiene todas las referencias, no el subgrupo que se utiliza en el paper. Por lo tanto, se recomienda hacer lo siguiente: crear una colección/carpeta compartida de Zotero (asumiendo escenario de trabajo colaborativo) donde se copian las referencias que se utilizan en el paper. Esto es fácil en Zotero, solo se arrastran, y no hace que toda la información se duplique, es solo un link. Como es compartida, cualquier miembro del equipo puede modificar. Precaución: el nombre de esta carpeta sin espacios y sin acentos El coordinador/primer autor exporta esta colección a la carpeta del proyecto colaborativo (eventualmente un dropbox) donde está el tex/md. Para ello, botón derecho sobre la carpeta, “export library”, seleccionar format Better Bibtex, y nuevamente, muy importante: check box “keep updated”, así cualquier cambio que se haga en la colección desde Zotero se reflejará en el .bib. Guardar en la carpeta donde se encuentra el archivo tex Luego, revisar en la pestaña de BBT de preferencias, en automatic export, que la carpeta efectivamente está en el listado. Además, marcar la opción “on change”. 3.2 Referenciando en TEX En el preámbulo (hay diferentes opciones de formato, pero para estilo clásico APA): \\usepackage{natbib} % for Bibtex \\bibliographystyle{apalike} algunos estilos vienen por defecto, si no se pueden bajar en: https://es.sharelatex.com/learn/Natbib_bibliography_styles si el estilo no está por defecto, guardar en la carpeta donde se encuentra el .bib obligatorio: tiene que definirse un estilo para que funcione la compilación de la bibliografía (al menos esa fue mi experiencia) Y luego, donde se quiera la bibliografía, (usualmente, alfinal, antes de end(document)) \\bibliography{micoleccion} aquí va el nombre de la colección, cuidado con no darle nombre con espacios, y tampoco terminarla con .bib También se puede indicar con path relativos, ej: \\bibliography{../../bib/micoleccion} donde “../” es para subir un nivel en la estructura de directorios Con esto, ya se puede comenzar a citar con las distintas opciones; ver https://gking.harvard.edu/files/natnotes2.pdf Y también se puede creando un link simbólico en la carpeta respectiva que apunte hacia el archivo .bib de la carpeta Zotero, de esa manera no es necesario especificar la ruta. Para mayores detalles referentes a natbib y en general bibliographic management en Latex ver https://es.sharelatex.com/learn/Bibliography_management_with_natbib Algunos issues con Latex: si se añade alguna cita a la carpeta Zotero, si bien esto es actualizado automáticamente en el bib, no necesariamente es reconocido al momento de citar. Por eso, se recomienda tener abierto el archivo .bib en el editor de tex en otra pestaña, y si la referencia no aparece al intentar citar compilar el bib, esto hace que queden disponibles para citar (lo que se ve en el .bbl, donde se encuentran las referencias citadas en el texto) Por lo visto, las referencias en el .bbl se van sumando, y no se borran. Por lo tanto, puede pasar que se cite algo en alguna ocasión, pero si esa cita se decide borrar va a seguir de todas maneras apareciendo en la bibliografía final. Para ajustar esto, cuando se genere una versión más definitiva del documento, borrar el bbl y compilar el tex nuevamente. Atención: si se quiere cambiar el estilo ( ), a veces no lo reconoce y se queda con el anterior o arroja error; la opción que me resulta es borrar los archivos aux y bbl, y luego compilar nuevamente. También hay problemas cuando alguna entrada del archivo .bib no tiene el año, en este archivo aparecen como ???? y esto crea dificultades de compilación. Importante: arreglar esto en Zotero (no en bib ni bbl), sincronizar nuevamente y compilar. 3.3 Referenciando en Markdown se establece la ruta al archivo bib en el YAML header, al comienzo del documento, por ejemplo: --- bibliography: - &#39;MyLibrary.bib&#39; --- para citar, se debe escribir el “citation key” de la referencia correspondiente. la lista de referencias aparece automáticamente al final del documento el estilo de bibliografía se debe indicar adicionalmente, basado en un archivo .csl correspondiente.Un listado de estilos disponibles se encuentra en: https://www.zotero.org/styles Luego el csl se agrega al YAML. Ej: --- bibliography: - MyLibrary.bib - csl: apa.csl --- Alternativas para automatizar la inserción de referencias: ya que insertar referencias manualmente es muy engorroso, hay algunas alternativas de automatización que generan un flujo de trabajo similar al de insertar citas y bibliografía en Word/Open Office vía Zotero. El mejor entorno que conozco para hacer esto es Atom, porque sirve tanto para Latex como para Markdown. También hay una forma en Rstudio vía la librería/add-in “citr”. Comenzamos con esta: Usando Rstudio - citr https://github.com/crsh/citr: Al instalar Rmarkdown, se instala automaticamente pandoc al interior de la carpeta de Rstudio (/usr/lib/rstudio/bin/pandoc), donde están los ejecutables pandoc y pandoc-citeproc. Por lo tanto, en archivos Rmd basta dar el nombre del archivo/path al bib en el YAML header para que encuentre la bibliografía y la compile correctamente. Instalar citr reiniciar Luego en el add-in (desplegable, o tools/add-ins) aparece “insert citations”, si está bien especificado el bib en el YAML debería aparecer aquí la lista de referencias. 3.3 Markdown / Xaringan Xaringan es una librería de R que permite generar presentaciones en html basadas en remark, que utiliza una estructura simple de markdown. Básicamente, lo que hace Remark es compilar un markdown + un poco de css a un html, y Xaringan se encarga de la parte css así que el usuario trabaja (casi) solo en markdown. El problema: para generar el html no pasa por pandoc, así que no sigue la misma lógica de las citas de markdown. Pero … todo tiene una vuelta de tuerca, y en este caso se puede utilizando el paquete de R RefManageR. Indicar paquete y librería: en un chunk de setup luego del YAML header. La librería se indica con la función ReadBib de RefManageR (en este caso, en el mismo directorio, si no dar el path) ```{r setup, include=FALSE} options(htmltools.dir.version = TRUE) pacman::p_load(RefManageR) bib &lt;- ReadBib(&quot;merit_pref_int.bib&quot;, check = FALSE) ``` Para citar: los comandos básicos del RefManageR son Cite(), Citep() y Citet() (como en natbib), y en el paréntesis va el nombre del objeto generado antes y que contiene las referencias (bib) y la clave de la referencia como está en el Bibtex. Ejemplo: Cite(bib, “castillo_2018”). Ahora, como se trata de compilar a html sin pasar por pandoc, hay que dar la instrucción para que R/RefManageR hagan el trabajo, así que la cita se escribe en un mini-chunk de código: r Cite (bib, “castillo_2018”) Algunas complicaciones del RefManagerR muy estricto con la librería .bib, si hay algo que falta en algún campo va a reportar el error. Por lo tanto, a menos que el .bib de la colección completa esté perfecto, es mejor hacer una subcolección de Zotero con las referencias y esta exportarla como Bibtext a la carpeta correspondiente donde se está trabajando se puede usar el Zotero Picker en Atom para facilitar el trabajo, pero hay que sacarle manualmente la @ inicial que es automática para referencias en markdown que pasan por pandoc Para generar las referencias: en la lámina que corresponde, incluir: ```{r, results=&#39;asis&#39;, echo=FALSE} PrintBibliography(bib) ``` 3.3 Usando Atom para flujo de trabajo académico en texto plano con citas Aquí hay tres cosas que ver: insertar, preview y convert Insertar: para insertar citaciones lo más fácil es instalar el zotero-picker, que automáticamente detecta la librería bib que se encuentra en la misma carpeta de Zotero (vía Better Bibtex). Funciona igual que el plugin clásico para procesadores de texto, shortcut alt-z otra alternativa que se puede instalar en paralelo es el autocomplete-bibtex, que busca la cita una vez escrito @ y las tres primeras letras, asumiendo que la bib está en el mismo directorio (o probar también si funciona dando el path con YAML) Preview markdown se puede visualizar simultáneamente en atom con el paquete markdown-preview-plus (MPP) (ctrl+shift+m). Para que aparezcan las citas y la bibliografía se deben hacer un par de ajustes (* si se instala Rmarkdown, pandoc ya está instalado, pero en el directorio de R y Atom no lo reconoce, por eso recomiendo instalarlo nuevamente): instalar pandoc, en ubuntu sudo apt-get update sudo apt-get install pandoc chequear instalado: dpkg -L pandoc instalar pandoc citeproc sudo apt-get update sudo apt-get install pandoc-citeproc en las opciones del paquete enable pandoc parser pandoc options: citations en el documento .md crear al principio un YAML header con el path hacia el bib: --- bibliography: - &#39;/media/ntfs/Dropbox/zoterojcydocs/MyLibrary.bib&#39; --- con esto, luego el MPP muestra las citas (en el preview) Convertir: el paquete pandoc-convert (hasta ahora) no convierte las citas, solo el texto. Lo que funciona es vía linea de comando, abriendo terminal desde atom y: pandoc -s -S --bibliography MyLibrary.bib --filter pandoc-citeproc --csl apa-cv.csl inequality_perception_issp.md -o inequality_perception_issp.html "],
["control-de-versiones.html", "Capitulo 4 Control de versiones", " Capitulo 4 Control de versiones Pasos Instalar Git a nivel local sudo apt-get install git Abrir cuenta en Github Vincular local con Github En terminal: git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" "],
["flujos-reproducibles-y-colaborativos.html", "Capitulo 5 Flujos reproducibles y colaborativos", " Capitulo 5 Flujos reproducibles y colaborativos "],
["comunicacion.html", "Capitulo 6 Comunicación", " Capitulo 6 Comunicación "],
["flujo-x-en-atom.html", "Capitulo 7 Flujo X en Atom", " Capitulo 7 Flujo X en Atom "],
["referencias.html", "Referencias", " Referencias "]
]
